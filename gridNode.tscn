[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

const Matrix = preload(\"res://matrix_functions.gd\")
var mlib = Matrix.new()
const HORSPACE = 42 # WARNING: based on 420 x 840 aspect ratio
const VERSPACE = 42

const BEGIN_HOR = 1
const END_HOR = 11
const BEGIN_VER = 1
const END_VER = 21

var gridNode = {}
var blockScene = preload(\"res://Tetromino.tscn\")
# Called when the node enters the scene tree for the first time.
func _ready():
	var verIncrement = 0
	for i in range(BEGIN_VER, END_VER):
		gridNode[i] = {}
		var horIncrement = 0
		for k in range(BEGIN_HOR, END_HOR):
			gridNode[i][k] = {
				ver = i,
				hor = k,
				x = horIncrement,
				y = verIncrement,
				tileRef = null,
				active = false,
			}
			horIncrement += HORSPACE
		verIncrement += VERSPACE


func delete_gridNode(ver, hor):
	gridNode[ver][hor].tileRef.queue_free()
	gridNode[ver][hor].tileRef = null
	gridNode[ver][hor].active = false

func set_active_gridNode(ver, hor, block):
	gridNode[ver][hor].tileRef = block
	gridNode[ver][hor].active = true
	
func unactivate_gridNode(ver, hor):
	gridNode[ver][hor].active = false
	
func spawn_block(ver, hor):
	var new_block = blockScene.instance()
	set_active_gridNode(ver, hor, new_block)
	new_block.set_position(Vector2(gridNode[ver][hor].x, gridNode[ver][hor].y))
	add_child(new_block)
	return gridNode[ver][hor]
	
func finalizeBlocks(blocks):
	for block in blocks:
		unactivate_gridNode(block.ver, block.hor)

func deleteFromGrid(blocks):
	for block in blocks:
		delete_gridNode(block.ver, block.hor)
	
func canTranslate(blocks, direction):
	var next_i
	var next_k
	for block in blocks:
		match direction:
			\"right\": 
				next_i = block.ver
				next_k = block.hor + 1
			\"left\":
				next_i = block.ver
				next_k = block.hor - 1
			\"down\":
				next_i = block.ver + 1
				next_k = block.hor
		if next_k > gridNode[1].size() or next_i > gridNode.size() or next_k < 1:
			return false
		var gridNodeElement = gridNode[next_i][next_k]
		if not gridNodeElement.tileRef == null and gridNodeElement.active == false:
			return false
	return true
	
func translateBlocks(blocks, direction):
	var new_blocks = []
	if canTranslate(blocks, direction):
		deleteFromGrid(blocks)
		for block in blocks:
			match direction:
				\"right\": 
					new_blocks.append(spawn_block(block.ver, block.hor + 1))
				\"left\": 
					new_blocks.append(spawn_block(block.ver, block.hor - 1))
				\"down\": 
					new_blocks.append(spawn_block(block.ver + 1, block.hor))
	if not new_blocks.size() == 0:
		blocks = new_blocks
	return blocks

func rotateBlocks(blocks):
	var new_blocks = []
	var rotation_matrices = []
	for block in blocks:
		rotation_matrices.append(getBlockRotationPosition(block))
	for block in blocks:
		delete_gridNode(block.ver, block.hor)
	for matrix in rotation_matrices:
		new_blocks.append(spawn_block(matrix[1], matrix[0]))
	if not new_blocks.size() == 0:
		blocks = new_blocks
	return blocks

func getBlockRotationPosition(block):
	var rot_mat = [[0, -1], [1, 0]]
	var matrix = [[block.hor], [block.ver]]
	var result_m = mlib.multiply(rot_mat, matrix)
	var new_matrix = []
	for result in result_m:
		for i in result:
			new_matrix.append(abs(i))
	return new_matrix




func spawnSquare():
	var blocks = []
	blocks.append(spawn_block(1,1))
	blocks.append(spawn_block(1,2))
	blocks.append(spawn_block(2,1))
	blocks.append(spawn_block(2,2))
	return blocks
	
func spawnL():
	var blocks = []
	blocks.append(spawn_block(1,1))
	blocks.append(spawn_block(1,2))
	blocks.append(spawn_block(1,3))
	blocks.append(spawn_block(2,3))
	return blocks

func spawnS():
	var blocks = []
	blocks.append(spawn_block(1,1))
	blocks.append(spawn_block(1,2))
	blocks.append(spawn_block(2,2))
	blocks.append(spawn_block(2,3))
	return blocks
	
func spawnT():
	var blocks = []
	blocks.append(spawn_block(1,1))
	blocks.append(spawn_block(1,2))
	blocks.append(spawn_block(2,2))
	blocks.append(spawn_block(1,3))
	return blocks
	
func spawnStraight():
	var blocks = []
	blocks.append(spawn_block(1,1))
	blocks.append(spawn_block(1,2))
	blocks.append(spawn_block(1,3))
	blocks.append(spawn_block(1,4))
	return blocks
	
func spawnL_inv():
	var blocks = []
	blocks.append(spawn_block(1,1))
	blocks.append(spawn_block(2,1))
	blocks.append(spawn_block(1,2))
	blocks.append(spawn_block(1,3))
	return blocks
	
func spawnS_inv():
	var blocks = []
	blocks.append(spawn_block(2,1))
	blocks.append(spawn_block(2,2))
	blocks.append(spawn_block(1,2))
	blocks.append(spawn_block(1,3))
	return blocks
	







"

[node name="Node" type="Node2D"]
script = SubResource( 1 )

