[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

const HORSPACE = 42 # WARNING: based on 420 x 840 aspect ratio
const VERSPACE = 42

const BEGIN_HOR = 1
const END_HOR = 11
const BEGIN_VER = 1
const END_VER = 21

var gridNode = {}
var blockScene = preload(\"res://Tetromino.tscn\")
# Called when the node enters the scene tree for the first time.
func _ready():
	var verIncrement = 0
	for i in range(BEGIN_VER, END_VER):
		gridNode[i] = {}
		var horIncrement = 0
		for k in range(BEGIN_HOR, END_HOR):
			gridNode[i][k] = {
				ver = i,
				hor = k,
				x = horIncrement,
				y = verIncrement,
				tileRef = null,
			}
			horIncrement += HORSPACE
		verIncrement += VERSPACE
		
func spawnBlock(ver, hor):
	var new_block = blockScene.instance()
	gridNode[ver][hor].tileRef = new_block
	new_block.set_position(Vector2(gridNode[ver][hor].x, gridNode[ver][hor].y))
	add_child(new_block)
	return gridNode[ver][hor]
	

func spawnSquare():
	var blocks = []
	blocks.append(spawnBlock(1,1))
	blocks.append(spawnBlock(1,2))
	blocks.append(spawnBlock(2,1))
	blocks.append(spawnBlock(2,2))
	return blocks
	
func spawnL():
	var blocks = []
	blocks.append(spawnBlock(1,1))
	blocks.append(spawnBlock(1,2))
	blocks.append(spawnBlock(1,3))
	blocks.append(spawnBlock(2,3))
	return blocks

func spawnS():
	var blocks = []
	blocks.append(spawnBlock(1,1))
	blocks.append(spawnBlock(1,2))
	blocks.append(spawnBlock(2,2))
	blocks.append(spawnBlock(2,3))
	return blocks
	
func spawnT():
	var blocks = []
	blocks.append(spawnBlock(1,1))
	blocks.append(spawnBlock(1,2))
	blocks.append(spawnBlock(2,2))
	blocks.append(spawnBlock(1,3))
	return blocks
	
func spawnStraight():
	var blocks = []
	blocks.append(spawnBlock(1,1))
	blocks.append(spawnBlock(1,2))
	blocks.append(spawnBlock(1,3))
	blocks.append(spawnBlock(1,4))
	return blocks
	
func spawnL_inv():
	var blocks = []
	blocks.append(spawnBlock(1,1))
	blocks.append(spawnBlock(2,1))
	blocks.append(spawnBlock(1,2))
	blocks.append(spawnBlock(1,3))
	return blocks
	
func spawnS_inv():
	var blocks = []
	blocks.append(spawnBlock(2,1))
	blocks.append(spawnBlock(2,2))
	blocks.append(spawnBlock(1,2))
	blocks.append(spawnBlock(1,3))
	return blocks
	
func moveBlock(block, dir):
	var next_i = block.ver
	var next_k = block.hor
	match dir:
		\"right\": next_k += 1
		\"down\": next_i += 1
		\"left\": next_k -= 1
	var temp = spawnBlock(next_i, next_k)
	temp.tileRef.get_node(\"BBlock5\").modulate = block.tileRef.get_node(\"BBlock5\").modulate
	gridNode[block.ver][block.hor].tileRef.queue_free()
	gridNode[block.ver][block.hor].tileRef = null
	return temp
	
func translateRight(blocks):
	var new_blocks = []
	blocks = sortBlocksByRightMost(blocks)
	if canTranslateBlocksRight(blocks):
		for block in blocks:
			new_blocks.append(moveBlock(block, \"right\"))
	if not new_blocks.size() == 0:
		blocks = new_blocks
	return blocks
	
func translateLeft(blocks):
	var new_blocks = []
	blocks = sortBlocksByLeftMost(blocks)
	if canTranslateBlocksLeft(blocks):
		for block in blocks:
			new_blocks.append(moveBlock(block, \"left\"))
	if not new_blocks.size() == 0:
		blocks = new_blocks
	return blocks
	
func moveBlocks(blocks):
	var new_blocks = []
	blocks = sortBlocksByLowest(blocks)
	if canMoveBlocks(blocks):
		for block in blocks:
			new_blocks.append(moveBlock(block, \"down\"))
	if not new_blocks.size() == 0:
		blocks = new_blocks
	return blocks
	
func sortBlocksByLowest(blocks):
	var new_blocks = []
	while blocks.size() != 0:
		var toBeAppended = getLowestBlockInArray(blocks)
		new_blocks.append(toBeAppended)
		blocks.erase(toBeAppended)
	return new_blocks
	
func sortBlocksByRightMost(blocks):
	var new_blocks = []
	while blocks.size() != 0:
		var toBeAppended = getRightMostBlockInArray(blocks)
		new_blocks.append(toBeAppended)
		blocks.erase(toBeAppended)
	return new_blocks
	
func sortBlocksByLeftMost(blocks):
	var new_blocks = []
	while blocks.size() != 0:
		var toBeAppended = getLeftMostBlockInArray(blocks)
		new_blocks.append(toBeAppended)
		blocks.erase(toBeAppended)
	return new_blocks
	
func getRightMostBlockInArray(blocks):
	var rightmost = 0
	var rightmost_block
	for block in blocks:
		if block.hor >= rightmost:
			rightmost_block = block
			rightmost = block.hor
	return rightmost_block
	
func getLeftMostBlockInArray(blocks):
	var leftmost = END_HOR
	var leftmost_block
	for block in blocks:
		if block.hor <= leftmost:
			leftmost_block = block
			leftmost = block.hor
	return leftmost_block

func getLowestBlockInArray(blocks):
	var lowest = 0
	var lowest_block
	for block in blocks:
		if block.ver >= lowest:
			lowest_block = block
			lowest = block.ver
	return lowest_block
	
func canMoveBlocks(blocks):
	for block in blocks:
		var next_i = block.ver + 1
		var next_k = block.hor
		if next_i > gridNode.size():
			return false
		var gridNodeElement = gridNode[next_i][next_k]
		if gridNodeElement.tileRef != null and not blocksArrayContainsTileRef(blocks, gridNodeElement.tileRef):
			return false
	return true
	
func canTranslateBlocksRight(blocks):
	for block in blocks:
		var next_i = block.ver
		var next_k = block.hor + 1
		if next_k > gridNode[1].size():
			return false
		var gridNodeElement = gridNode[next_i][next_k]
		if gridNodeElement.tileRef != null and not blocksArrayContainsTileRef(blocks, gridNodeElement.tileRef):
			return false
	return true
		
		
func canTranslateBlocksLeft(blocks):
	for block in blocks:
		var next_i = block.ver
		var next_k = block.hor - 1
		if next_k < 1:
			return false
		var gridNodeElement = gridNode[next_i][next_k]
		if gridNodeElement.tileRef != null and not blocksArrayContainsTileRef(blocks, gridNodeElement.tileRef):
			return false
	return true
	
func blocksArrayContainsTileRef(blocks, tileRef):
	for block in blocks:
		if block.tileRef == tileRef:
			return true
	return false









"

[node name="Node" type="Node2D"]
script = SubResource( 1 )

