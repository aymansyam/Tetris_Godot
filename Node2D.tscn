[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


var gridNodeScene = preload(\"res://gridNode.tscn\")
var gridNode
var currentBlocks
var rng = RandomNumberGenerator.new()

const MOVE_TIME = 0.5
const DEAD_END_TIME = MOVE_TIME

# Called when the node enters the scene tree for the first time.
func _ready():
	gridNode = gridNodeScene.instance()
	add_child(gridNode)
	generateShape()
	$BlockMovementTimer.wait_time = MOVE_TIME
	$BlockDeadEndTimer.wait_time = DEAD_END_TIME
	
		
func _input(event):
	if Input.is_action_pressed(\"ui_right\"):
		currentBlocks = gridNode.translateBlocks(currentBlocks, \"right\")
	if Input.is_action_pressed(\"ui_left\"):
		currentBlocks = gridNode.translateBlocks(currentBlocks, \"left\")
	if Input.is_action_pressed(\"ui_down\"):
		currentBlocks = gridNode.translateBlocks(currentBlocks, \"down\")
	if Input.is_action_pressed(\"ui_up\"):
		currentBlocks = gridNode.rotateBlocks(currentBlocks)
	
func generateShape():
	rng.randomize()
	var num = rng.randi_range(0, 6)
	if num == 0:
		currentBlocks = gridNode.spawnSquare()
		applyShadersToBlocks(currentBlocks, Color(0.25, 0.25, 0.5))
	elif num == 1:
		currentBlocks = gridNode.spawnL()
		applyShadersToBlocks(currentBlocks, Color(0.25, 0.5, 0.5))
	elif num == 2:
		currentBlocks = gridNode.spawnS()
		applyShadersToBlocks(currentBlocks, Color(0.75, 0.25, 0.5))
	elif num == 3:
		currentBlocks = gridNode.spawnT()
		applyShadersToBlocks(currentBlocks, Color(0.65, 0.35, 0.5))
	elif num == 4:
		currentBlocks = gridNode.spawnStraight()
		applyShadersToBlocks(currentBlocks, Color(0.6, 0.15, 0.5))
	elif num == 5:
		currentBlocks = gridNode.spawnL_inv()
		applyShadersToBlocks(currentBlocks, Color(0.25, 0.25, 0.1))
	elif num == 6:
		currentBlocks = gridNode.spawnS_inv()
		applyShadersToBlocks(currentBlocks, Color(0.25, 0.3, 0.3))


func applyShadersToBlocks(blocks, color):
	for block in currentBlocks:
		block.tileRef.get_node(\"BBlock5\").modulate = color
	
func _on_BlockMovementTimer_timeout():
	currentBlocks = gridNode.translateBlocks(currentBlocks, \"down\")
	if not gridNode.canTranslate(currentBlocks, \"down\"):
		$BlockDeadEndTimer.start()


func _on_BlockDeadEndTimer_timeout():
	if not gridNode.canTranslate(currentBlocks, \"down\"):
		gridNode.finalizeBlocks(currentBlocks)
		generateShape()
		
		

"

[node name="Level" type="Node2D"]
script = SubResource( 1 )

[node name="TileMap" type="TileMap" parent="."]
cell_size = Vector2( 42, 42 )
format = 1

[node name="BlockMovementTimer" type="Timer" parent="."]
autostart = true

[node name="BlockDeadEndTimer" type="Timer" parent="."]
autostart = true

[connection signal="timeout" from="BlockMovementTimer" to="." method="_on_BlockMovementTimer_timeout"]
[connection signal="timeout" from="BlockDeadEndTimer" to="." method="_on_BlockDeadEndTimer_timeout"]
